type CanisterSettings = record {
    freezing_threshold : opt nat;
    controllers : opt vec principal;
    reserved_cycles_limit : opt nat;
    memory_allocation : opt nat;
    compute_allocation : opt nat;
};
type CmcCreateCanisterArgs = record {
    subnet_selection : opt SubnetSelection;
    settings : opt CanisterSettings;
};
type CmcCreateCanisterError = variant {
    Refunded : record { create_error : text; refund_amount : nat };
    RefundFailed : record { create_error : text; refund_error : text };
};
type Result = variant { Ok : principal; Err : CmcCreateCanisterError };
type SubnetFilter = record { subnet_type : opt text };
type SubnetSelection = variant {
    Filter : SubnetFilter;
    Subnet : record { subnet : principal };
};
service : {
    create_canister : (CmcCreateCanisterArgs) -> (Result);
    fail_next_create_canister_with : (CmcCreateCanisterError) -> ();
    last_create_canister_args : () -> (CmcCreateCanisterArgs) query;
};
