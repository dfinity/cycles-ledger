type Account = record { owner : principal; subaccount : opt vec nat8 };
type Allowance = record { allowance : nat; expires_at : opt nat64 };
type AllowanceArgs = record { account : Account; spender : Account };
type BlockIndex = nat;
type ApproveArgs = record {
  from_subaccount : opt vec nat8;
  spender : Account;
  amount : nat;
  expected_allowance : opt nat;
  expires_at : opt nat64;
  fee : opt nat;
  memo : opt vec nat8;
  created_at_time : opt nat64;
};
type ApproveError = variant {
  BadFee : record { expected_fee : nat };
  InsufficientFunds : record { balance : nat };
  AllowanceChanged : record { current_allowance : nat };
  Expired : record { ledger_time : nat64 };
  TooOld;
  CreatedInFuture : record { ledger_time : nat64 };
  Duplicate : record { duplicate_of : nat };
  TemporarilyUnavailable;
  GenericError : record { message : text; error_code : nat };
};
type DepositArgs = record {
  to : Account;
  memo : opt vec nat8;
};
type DepositResult = record { balance : nat; block_index : BlockIndex };
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type SendArgs = record {
  amount : nat;
  from_subaccount : opt vec nat8;
  to : principal;
  created_at_time : opt nat64;
};
type SendError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  FailedToSend : record {
    fee_block : opt nat;
    rejection_code : RejectionCode;
    rejection_reason : text;
  };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  InvalidReceiver : record { receiver : principal };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
type SupportedStandard = record { url : text; name : text };
type TransferArgs = record {
  from_subaccount : opt vec nat8;
  to : Account;
  amount : nat;
  fee : opt nat;
  memo : opt vec nat8;
  created_at_time : opt nat64;
};
type TransferError = variant {
  BadFee : record { expected_fee : nat };
  BadBurn : record { min_burn_amount : nat };
  InsufficientFunds : record { balance : nat };
  TooOld;
  CreatedInFuture : record { ledger_time : nat64 };
  Duplicate : record { duplicate_of : nat };
  TemporarilyUnavailable;
  GenericError : record { message : text; error_code : nat };
};
type TransferFromArgs = record {
  spender_subaccount : opt vec nat8;
  from : Account;
  to : Account;
  amount : nat;
  fee : opt nat;
  memo : opt vec nat8;
  created_at_time : opt nat64;
};
type TransferFromError = variant {
  BadFee : record { expected_fee : nat };
  BadBurn : record { min_burn_amount : nat };
  InsufficientFunds : record { balance : nat };
  InsufficientAllowance : record { allowance : nat };
  TooOld;
  CreatedInFuture : record { ledger_time : nat64 };
  Duplicate : record { duplicate_of : nat };
  TemporarilyUnavailable;
  GenericError : record { message : text; error_code : nat };
};
type Value = variant {
  Int : int;
  Map : vec record { text; Value };
  Nat : nat;
  Nat64 : nat64;
  Blob : vec nat8;
  Text : text;
  Array : vec Value;
};

type GetTransactionsArgs = vec record { start : nat; length : nat };

type GetTransactionsResult = record {
  // Total number of transactions in the
  // transaction log.
  log_length : nat;

  transactions : vec record { id : nat; transaction : Value };

  // The archived_transactions vector is always going to be empty
  // for this ledger because there is no archive node.
  archived_transactions : vec record {
    args : GetTransactionsArgs;
    callback : func(GetTransactionsArgs) -> (GetTransactionsResult) query;
  };
};

type DataCertificate = record {
  // See https://internetcomputer.org/docs/current/references/ic-interface-spec#certification
  certificate : blob;

  // CBOR encoded hash_tree
  hash_tree : blob;
};

type InitArgs = record {
  max_transactions_per_request : nat64;
  index_id : opt principal;
};

type ChangeIndexId = variant {
  Unset;
  SetTo : principal;
};

type UpgradeArgs = record {
  max_transactions_per_request : opt nat64;
  change_index_id : opt ChangeIndexId;
};

type LedgerArgs = variant {
  Init : InitArgs;
  Upgrade : opt UpgradeArgs;
};

type CreateCanisterArgs = record {
  from_subaccount : opt vec nat8;
  created_at_time : opt nat64;
  amount : nat;
  creation_args : opt CmcCreateCanisterArgs;
};

type CmcCreateCanisterArgs = record {
  // Optional canister settings that, if set, are applied to the newly created canister.
  // If not specified, the caller is the controller of the canister and the other settings are set to default values.
  settings : opt CanisterSettings;

  // Optional instructions to select on which subnet the new canister will be created on.
  subnet_selection : opt SubnetSelection;
};

type CanisterSettings = record {
  controllers : opt vec principal;
  compute_allocation : opt nat;
  memory_allocation : opt nat;
  freezing_threshold : opt nat;
  reserved_cycles_limit : opt nat;
};

type SubnetSelection = variant {
  /// Choose a specific subnet
  Subnet : record {
    subnet : principal;
  };
  // Choose a random subnet that satisfies the specified properties.
  Filter : SubnetFilter;
};

type SubnetFilter = record {
  subnet_type : opt text;
};

type CreateCanisterSuccess = record {
  block_id : BlockIndex;
  canister_id : principal;
};

type CreateCanisterError = variant {
  InsufficientFunds : record { balance : nat };
  TooOld;
  CreatedInFuture : record { ledger_time : nat64 };
  TemporarilyUnavailable;
  Duplicate : record {
    duplicate_of : nat;
    // If the original transaction created a canister then this field will contain the canister id.
    canister_id : opt principal;
  };
  FailedToCreate : record {
    fee_block : opt BlockIndex;
    refund_block : opt BlockIndex;
    error : text;
  };
  GenericError : record { message : text; error_code : nat };
};

type MetadataValue = variant {
  Nat : nat;
  Int : int;
  Text : text;
  Blob : blob;
};

type HttpRequest = record {
  url : text;
  method : text;
  body : vec nat8;
  headers : vec record { text; text };
};
type HttpResponse = record {
  body : vec nat8;
  headers : vec record { text; text };
  status_code : nat16;
};

service : (ledger_args : LedgerArgs) -> {
  deposit : (DepositArgs) -> (DepositResult);
  http_request : (HttpRequest) -> (HttpResponse) query;
  icrc1_balance_of : (Account) -> (nat) query;
  icrc1_decimals : () -> (nat8) query;
  icrc1_fee : () -> (nat) query;
  icrc1_metadata : () -> (vec record { text; MetadataValue }) query;
  icrc1_minting_account : () -> (opt Account) query;
  icrc1_name : () -> (text) query;
  icrc1_supported_standards : () -> (vec SupportedStandard) query;
  icrc1_symbol : () -> (text) query;
  icrc1_total_supply : () -> (nat) query;
  icrc1_transfer : (TransferArgs) -> (variant { Ok : BlockIndex; Err : TransferError });
  icrc2_allowance : (AllowanceArgs) -> (Allowance) query;
  icrc2_approve : (ApproveArgs) -> (variant { Ok : nat; Err : ApproveError });
  icrc2_transfer_from : (TransferFromArgs) -> (variant { Ok : nat; Err : TransferFromError });
  icrc3_get_tip_certificate : () -> (opt DataCertificate) query;
  icrc3_get_transactions : (GetTransactionsArgs) -> (GetTransactionsResult) query;
  send : (SendArgs) -> (variant { Ok : BlockIndex; Err : SendError });
  create_canister : (CreateCanisterArgs) -> (variant { Ok : CreateCanisterSuccess; Err : CreateCanisterError });
};
